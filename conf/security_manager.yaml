# Copyright 2017 TEAM PER LA TRASFORMAZIONE DIGITALE
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Questo e' la descrizione delle API che vengono esposte da dati.gov.it.
# Le API sono pubbliche
swagger: '2.0'
info:
  title: Security Manager API
  description: Security Manager API
  version: "BETA"
  termsOfService: http://termofservice
  contact:
    name: team digitale
    url: https://teamdigitale.governo.it
  license:
    name: Creative Commons 4.0 International
    url: http://creativecommons.org/licenses/by/4.0/
host : localhost:9002
#host : security-manager.default.svc.cluster.local:9000
# will be prefixed to all paths
basePath: /security-manager/v1
# array of all schemes that your API supports
schemes:
  - http
  - https
produces:
  - application/json
consumes:
  - application/json
#securityDefinitions:
  #basicAuth:
    #type: basic
    #description: HTTP Basic Authentication. Works over `HTTP` and `HTTPS`
paths:
  /sftp/init/{path_to_create}:
    get:
      summary: inits sftp folder
      description: |
        It inits the sftp folder for the given user with a specific folder
      tags:
        - sftp
      operationId: sftp
#      security:
#       - basicAuth: []
      parameters:
        - name: path_to_create
          in: path
          description: the path of the folder to create
          required: true
          type: string
          format: string
        - name: orgName
          in: query
          description: the organization of the user with catalog is loaded
          required: true
          type: string
      responses:
        200:
          description: the path created
          schema:
            type: string
        500:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  "/token":
    get:
      summary: Get Token
      description: |
        It returns the JWT token
      tags:
        - JWT Token
      operationId: token
      #security:
        #- basicAuth: []
      responses:
        200:
          description: The JWT token
          schema:
            type: string
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
#        default:
#          description: Unexpected error
#          schema:
#            $ref: '#/definitions/Error'
  "/daf/user":
    post:
      tags:
        - IPA
      description: Create a user
      operationId: createDAFuser
      produces:
      - application/json
      parameters:
      - name: user
        in: body
        description: User
        required: true
        schema:
          #type: object
          $ref: '#/definitions/IpaUser'
      responses:
        200:
          description: Success
          schema:
            #type: object
            $ref: '#/definitions/Success'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'

  "/daf/user/{uid}":
    put:
      tags:
        - IPA
      description: Update a user
      operationId: updateDAFuser
      produces:
      - application/json
      parameters:
      - name: uid
        in: path
        type: string
        description: User id
        required: true
      - name: user
        in: body
        description: User
        required: true
        schema:
          #type: object
          $ref: '#/definitions/IpaUserMod'
      responses:
        200:
          description: Success
          schema:
            #type: object
            $ref: '#/definitions/Success'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'

  "/ipa/group":
    post:
      tags:
        - IPA
      description: Create an freeIPA group
      operationId: createIPAgroup
      produces:
      - application/json
      parameters:
      - name: group
        in: body
        description: freeIPA group
        required: true
        schema:
          $ref: '#/definitions/Group'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Success'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
  "/ipa/group-useradd/{group}":
    put:
      tags:
        - IPA
      description: Add users to a IPA group
      operationId: addUserToIPAgroup
      produces:
      - application/json
      parameters:
      - name: group
        in: path
        description: Group uid
        required: true
        type: string
      - name: users
        in: body
        description: List of users
        required: true
        schema:
         $ref: '#/definitions/UserList'
      responses:
        200:
          description: Success
          schema:
            #type: object
            $ref: '#/definitions/Success'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
  "/ipa/group-userdel/{group}":
    put:
      tags:
        - IPA
      description: Delete users from a IPA group
      operationId: delUserToIPAgroup
      produces:
      - application/json
      parameters:
      - name: group
        in: path
        description: Group uid
        required: true
        type: string
      - name: users
        in: body
        description: List of users
        required: true
        schema:
         $ref: '#/definitions/UserList'
      responses:
        200:
          description: Success
          schema:
            #type: object
            $ref: '#/definitions/Success'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
  "/ipa/registration/request":
    post:
      tags:
        - IPA
      description: Handle a user registration request
      operationId: registrationrequest
      produces:
      - application/json
      parameters:
      - name: user
        in: body
        description: User
        required: true
        schema:
          #type: object
          $ref: '#/definitions/IpaUser'
      responses:
        200:
          description: Success
          schema:
            #type: object
            $ref: '#/definitions/Success'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
  "/ipa/registration/confirm":
    get:
      tags:
        - IPA
      description: Confirm registration
      operationId: registrationconfirm
      produces:
      - application/json
      parameters:
      - name: token
        in: query
        description: Confirmation token
        required: true
        type: string
      responses:
        200:
          description: Success
          schema:
            #type: object
            $ref: '#/definitions/Success'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'

  "/ipa/resetpwd/request":
    post:
      tags:
        - IPA
      description: Handle a password reset request
      operationId: resetpwdrequest
      produces:
      - application/json
      parameters:
      - name: resetMail
        in: body
        description: user email
        required: true
        schema:
          $ref: '#/definitions/ResetPwdPayload'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Success'
        403:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
  "/ipa/resetpwd/confirm":
    post:
      tags:
        - IPA
      description: Confirm password reset
      operationId: resetpwdconfirm
      produces:
      - application/json
      parameters:
      - name: resetinfo
        in: body
        description: token and new password
        required: true
        schema:
          $ref: '#/definitions/ConfirmResetPwdPayload'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Success'
        403:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'

  "/ipa/userbymail/{mail}":
    get:
      tags:
        - IPA
      description: Show user info
      operationId: findIpauserByMail
      produces:
      - application/json
      parameters:
      - name: mail
        in: path
        description: User email
        required: true
        type: string
      responses:
        200:
          description: IPA User
          schema:
            type: object
            $ref: '#/definitions/IpaUser'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
  "/ipa/userbyname/{userName}":
    get:
      tags:
        - IPA
      description: Show user info
      operationId: findIpauserByName
      produces:
      - application/json
      parameters:
      - name: userName
        in: path
        description: User uid
        required: true
        type: string
      responses:
        200:
          description: IPA User
          schema:
            type: object
            $ref: '#/definitions/IpaUser'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
  "/ipa/group/{cn}":
    get:
      tags:
        - IPA
      description: Show grpup info
      operationId: showipagroup
      produces:
      - application/json
      parameters:
      - name: cn
        in: path
        description: Group cn
        required: true
        type: string
      responses:
        200:
          description: IPA Group
          schema:
            type: object
            $ref: '#/definitions/IpaGroup'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'

#  "/daf/users":
#    get:
#      tags:
#        - DAF
#      description: List  DAF users
#      operationId: listDAFusers
#      produces:
#      - application/json
#      responses:
#        200:
#          description: Success
#          schema:
#            $ref: '#/definitions/StringList'
#       500:
#         description: Error Message
#          schema:
#            $ref: '#/definitions/Error'
  "/daf/organizations":
    get:
      tags:
        - DAF
      description: List  DAF organizations
      operationId: listDAForganization
      produces:
      - application/json
#      parameters:
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/StringList'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
  "/daf/organization":
    post:
      tags:
        - DAF
      description: Create a DAF organization
      operationId: createDAForganization
      produces:
      - application/json
      parameters:
      - name: organization
        in: body
        description: Organization
        required: true
        schema:
          $ref: '#/definitions/DafGroup'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Success'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
#  "/daf/defaultOrg":
#    post:
#      tags:
#        - DAF
#      description: Create default DAF organization
#      operationId: createDefaultDAForganization
#      produces:
#      - application/json
#      parameters:
#      - name: organization
#        in: body
#        description: Organization
#        required: true
#        schema:
#          $ref: '#/definitions/DafOrg'
#      responses:
#        200:
#          description: Success
#          schema:
#            $ref: '#/definitions/Success'
#        500:
#          description: Error Message
#          schema:
#           $ref: '#/definitions/Error'
  "/daf/organization/useradd":
    put:
      tags:
        - DAF
      description: Add auser to DAF organization
      operationId: useraddDAForganization
      produces:
      - application/json
      parameters:
      - name: payload
        in: body
        description: Username and groupCn
        required: true
        schema:
          $ref: '#/definitions/UserAndGroup'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Success'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
  "/daf/organization/userdel":
    put:
      tags:
        - DAF
      description: Delete a user from DAF organization
      operationId: userdelDAForganization
      produces:
      - application/json
      parameters:
      - name: payload
        in: body
        description: Username and groupCn
        required: true
        schema:
          $ref: '#/definitions/UserAndGroup'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Success'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
  "/daf/organization/{orgName}":
    delete:
      tags:
        - DAF
      description: delete DAF organization
      operationId: deleteDAForganization
      produces:
      - application/json
      parameters:
      - name: orgName
        in: path
        description: group Cn
        required: true
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Success'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
  "/daf/workgroups":
    get:
      tags:
        - DAF
      description: List  DAF workgroups
      operationId: listDAFworkgroup
      produces:
      - application/json
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/StringList'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
  "/daf/workgroup/{orgName}":
    post:
      tags:
        - DAF
      description: Create a DAF workgroup
      operationId: createDAFworkgroup
      produces:
      - application/json
      parameters:
      - name: orgName
        in: path
        description: group Cn
        required: true
        type: string
      - name: workgroup
        in: body
        description: Workgroup
        required: true
        schema:
          $ref: '#/definitions/DafGroup'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Success'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
  "/daf/workgroup/useradd":
    put:
      tags:
        - DAF
      description: Add auser to DAF workgroup
      operationId: useraddDAFworkgroup
      produces:
      - application/json
      parameters:
      - name: payload
        in: body
        description: Username and groupCn
        required: true
        schema:
          $ref: '#/definitions/UserAndGroup'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Success'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
  "/daf/workgroup/userdel":
    put:
      tags:
        - DAF
      description: Delete a user from DAF workgroup
      operationId: userdelDAFworkgroup
      produces:
      - application/json
      parameters:
      - name: payload
        in: body
        description: Username and groupCn
        required: true
        schema:
          $ref: '#/definitions/UserAndGroup'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Success'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
  "/daf/workgroup/{wrkName}":
    delete:
      tags:
        - DAF
      description: delete DAF workgroup
      operationId: deleteDAFworkgroup
      produces:
      - application/json
      parameters:
      - name: wrkName
        in: path
        description: group Cn
        required: true
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Success'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
  "/daf/getGroupsInfo":
    post:
      tags:
        - DAF
      description: get DAF group generic info
      operationId: getDAFGroupsInfo
      produces:
      - application/json
      parameters:
      - name: groups
        in: body
        description: group Cn list
        required: true
        schema:
          type: array
          items:
           type: string
          #$ref: '#/definitions/GroupList'
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/DafGroupInfo'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
  "/daf/user/{userName}":
    delete:
      tags:
        - DAF
      description: delete DAF user
      operationId: deleteDAFuser
      produces:
      - application/json
      parameters:
      - name: userName
        in: path
        description: user uid
        required: true
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Success'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
  "/daf/datasetACL/{datasetName}/setPermission":
    put:
      tags:
        - DAF
      description: set permission to dataset ACL
      operationId: setACLPermission
      produces:
      - application/json
      parameters:
      - name: datasetName
        in: path
        description: dataset name
        required: true
        type: string
      - name: aclPermission
        in: body
        description: Permission to add
        required: true
        schema:
          $ref: '#/definitions/AclPermission'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Success'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'

  "/daf/datasetACL/{datasetName}/deletePermission":
    put:
      tags:
        - DAF
      description: delete permission from dataset ACL
      operationId: deleteACLPermission
      produces:
      - application/json
      parameters:
      - name: datasetName
        in: path
        description: dataset name
        required: true
        type: string
      - name: permissionDel
        in: body
        description: Permission to del
        required: true
        schema:
          $ref: '#/definitions/AclPermissionDel'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Success'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'

  "/daf/datasetACL/{datasetName}":
    get:
      tags:
        - DAF
      description: get dataset ACL
      operationId: getDatasetACL
      produces:
      - application/json
      parameters:
      - name: datasetName
        in: path
        description: dataset name
        required: true
        type: string
      responses:
        200:
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/AclPermission'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
  "/internal/superset/table":
    post:
      tags:
        - Superset
      description: create a a table in superset
      operationId: createSupersetTable
      produces:
      - application/json
      parameters:
      - name: payload
        in: body
        description: Superset Table
        required: true
        schema:
          $ref: '#/definitions/SupersetTable'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/Success'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
  "/internal/superset/find_orgtables/{orgName}":
    get:
      tags:
        - Superset
      description: find superset organization tables
      operationId: findSupersetOrgTables
      produces:
      - application/json
      parameters:
      - name: orgName
        in: path
        description: Organization name
        required: true
        type: string
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/SupersetTables'
        500:
          description: Error Message
          schema:
            $ref: '#/definitions/Error'
definitions:
  IpaUser:
    type: object
    required:
      - uid
      - givenname
      - sn
      - mail
    properties:
      uid:
        description: user login
        type: string
      givenname:
        description: First name
        type: string
      sn:
        description: Last name
        type: string
      mail:
        type: string
      userpassword:
        type: string
      title:
        type: string
      organizations:
        type: array
        items:
          type: string
      workgroups:
        type: array
        items:
          type: string
      roles:
        type: array
        items:
          type: string
  IpaUserMod:
    type: object
    properties:
      givenname:
        description: First name
        type: string
      sn:
        description: Last name
        type: string
      rolesToAdd:
        type: array
        items:
          type: string
      rolesToDelete:
        type: array
        items:
          type: string
  IpaGroup:
    type: object
    required:
      - dn
    properties:
      dn:
        description: group dn
        type: string
      gidnumber:
        description: group gid number
        type: string
      member_user:
        type: array
        items:
          type: string
      member_sys_user:
        type: array
        items:
          type: string
      member_group:
        type: array
        items:
          type: string
      memberof_group:
        type: array
        items:
          type: string
  Group:
    type: object
    required:
      - cn
    properties:
      cn:
        description: group cn
        type: string
  UserList:
    type: object
    required:
      - uid
    properties:
      users:
        type: array
        items:
          type: string
  GroupList:
    type: object
    properties:
      groups:
        type: array
        items:
          type: string
  SupersetTables:
    type: object
    properties:
      tables:
        type: array
        items:
          type: string
  StringList:
    type: object
    required:
      - elem
    properties:
      elem:
        type: array
        items:
          type: string
  DafGroup:
    type: object
    required:
      - groupCn
      - predefinedUserPwd
      - supSetConnectedDbName
    properties:
      groupCn:
        description: group cn
        type: string
      predefinedUserPwd:
        type: string
      supSetConnectedDbName:
        description: Superset connected DB name
        type: string
      organizationMail:
        description: Organization email
        type: string
      ipaCode:
        description: organization IPA code
        type: string
  DafGroupInfo:
    type: object
    required:
      - groupCn
      - dafGroupType
    properties:
      groupCn:
        description: group cn
        type: string
      dafGroupType:
        description: organization or workgroup
        type: string
      parentGroup:
        description: only for workgroup
        type: string
      workgroups:
        description: only for organization
        type: array
        items:
          type: string
  UserAndGroup:
    type: object
    required:
      - userId
      - groupCn
    properties:
      groupCn:
        description: group cn
        type: string
      userId:
        description: username
        type: string
  SupersetTable:
    type: object
    required:
      - dbName
      - tableName
    properties:
      dbName:
        description: superset connection name
        type: string
      schema:
        description: schema name
        type: string
      tableName:
        description: table name
        type: string
  ResetPwdPayload:
    type: object
    required:
      - mail
    properties:
      mail:
        description: user mail address
        type: string
  ConfirmResetPwdPayload:
    type: object
    required:
      - token
      - newpwd
    properties:
      token:
        description: reset password token
        type: string
      newpwd:
        description: user new password
        type: string
  AclPermission:
    type: object
    required:
      - groupName
      - groupType
      - permission
    properties:
      groupName:
        description: group name
        type: string
      groupType:
        description: group type
        type: string
#        enum: [user, group]
      permission:
        description: group permission on a dataset
        type: string
#        enum: [r--, rw-]
  AclPermissionDel:
    type: object
    required:
      - groupName
      - groupType
    properties:
      groupName:
        description: group name
        type: string
      groupType:
        description: group type
        type: string
#        enum: [user, group]
  Error:
    properties:
      code:
        description: 0 for unmanaged errors, 1 for managed ones
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
  Success:
    type: object
    properties:
      message:
        type: string
      fields:
        type: string