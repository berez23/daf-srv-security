# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET         /security-manager/swagger.json controllers.Swagger.swaggerSpec(name="security_manager.yaml")

GET         /security-manager               controllers.Assets.versioned(path="/public/swagger-ui", file: Asset = "index.html")

#GET         /                              controllers.Assets.versioned(path="/public/swagger-ui", file: Asset = "index.html")

GET         /index.html                    controllers.Assets.versioned(path="/public/swagger-ui", file: Asset = "index.html")

GET         /o2c.html                      controllers.Assets.versioned(path="/public/swagger-ui", file: Asset = "o2c.html")

GET         /favicon.ico                   controllers.Assets.versioned(path="/public/swagger/images-ui", file: Asset = "favicon.ico")

GET         /api/*file                     controllers.Assets.versioned(path="/public/swagger-ui", file: Asset)

->          /security-manager/v1           security_manager.yaml.Routes

GET         /metrics                       controllers.MetricsController.index

### NoDocs ###
GET         /security-manager/docs/swagger-ui/*file controllers.Assets.at(path:String="/public/lib/swagger-ui", file:String)

### NoDocs ###
GET         /security-manager/*file         controllers.Assets.versioned(path="/public", file: Asset)


# Temporary Ckan API outside swagger file
GET         /sso-manager/secured/register                               controllers.SSOController.register
GET         /sso-manager/secured/retriveCookie/:appName                 controllers.SSOController.retriveCookie(appName:String)
GET         /sso-manager/secured/retriveCachedCookie/:appName           controllers.SSOController.retriveCachedCookie(appName:String)
GET         /sso-manager/secured/login/:appName                         controllers.SSOController.login(appName:String)
GET         /sso-manager/secured/test                                   controllers.SSOController.test

#GET        /sso-manager/internal/register                              controllers.SSOController.registerInternal(username:String,password:String)
GET         /sso-manager/internal/retriveCookie/:appName                controllers.SSOController.retriveCookieInternal(username:String,appName:String)
GET         /sso-manager/internal/retriveAdminCookie/:appName           controllers.SSOController.retriveAdminCookieInternal(appName:String)
GET         /sso-manager/internal/retrivePwdFromToken                   controllers.SSOController.retrivePwdFromTokenInternal

POST        /sso-manager/managed/bi-open-login                          controllers.SSOController.biOpenLogin

PUT        /impala/createTableFromFile/*path                            controllers.ImpalaController.createTableFromFile(path:String, schemaName:String, tableName:String)
PUT        /impala/createGrant                                          controllers.ImpalaController.createGrant(schemaName:String, tableName:String)
PUT        /impala/refreshTable                                         controllers.ImpalaController.refreshTable(schemaName:String, tableName:String)
PUT        /hdfs/setACL/*path                                           controllers.HdfsController.setPermissionRecursively(path:String, groupName:String, groupType:String, permission:String)
GET         /hdfs/checkFile/*path                                       controllers.HdfsController.checkFileExistence(path:String)
GET         /hdfs/retriveACL/*path                                      controllers.HdfsController.retriveACL(path:String)

GET         /hdfs/proxy/*path                                           controllers.HdfsController.callWebHdfs(path:String)
GET         /hdfs/proxy/                                                controllers.HdfsController.callWebHdfs(path:String="")
PUT         /hdfs/proxy/*path                                           controllers.HdfsController.callWebHdfs(path:String)
PUT         /hdfs/proxy/                                                controllers.HdfsController.callWebHdfs(path:String="")
POST        /hdfs/proxy/*path                                           controllers.HdfsController.callWebHdfs(path:String)
POST        /hdfs/proxy/                                                controllers.HdfsController.callWebHdfs(path:String="")
DELETE      /hdfs/proxy/*path                                           controllers.HdfsController.callWebHdfs(path:String)
DELETE      /hdfs/proxy/                                                controllers.HdfsController.callWebHdfs(path:String="")

GET          /:service/proxy/*path                                      controllers.RestServiceProxyController.proxy(service:String, path:String)
PUT          /:service/proxy/*path                                      controllers.RestServiceProxyController.proxy(service:String, path:String)
POST         /:service/proxy/*path                                      controllers.RestServiceProxyController.proxy(service:String, path:String)
DELETE       /:service/proxy/*path                                      controllers.RestServiceProxyController.proxy(service:String, path:String)




# Migration services, uncomment to activate them
#POST        /migration/createRole/:roleName                             controllers.MigrationController.createRole(roleName:String)
#POST        /migration/createHDFShomeDir/:userId                        controllers.MigrationController.createHDFShomeDir(userId:String)
#POST        /migration/addUserToOpenGroup/:userId                       controllers.MigrationController.addUserToOpenGroup(userId:String)
#POST        /migration/createImpalaRole                                 controllers.MigrationController.createImpalaRole
#POST        /migration/createGrant                                      controllers.MigrationController.createGrant
#POST        /migration/setDatasetFilesOwnership                         controllers.MigrationController.setDatasetFilesOwnership
#PUT         /migration/setDefaultViewerRole                             controllers.MigrationController.setDefaultViewerRole
#PUT         /migration/setEditorRole                                    controllers.MigrationController.setEditorRole
#POST        /migration/addOrgToOrgsGroup/:orgName                       controllers.MigrationController.addOrgToOrgsGroup(orgName:String)

